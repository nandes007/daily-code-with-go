package main

> Time or Date is represented in go using time.Time struct. Time can be also be represented as a
- Unix Time (Also known as Epoch Time) - it is the number of seconds elapsed since 00:00:00 on 1 january 1970. This time is also known as the unix epoch.
Structur:
        type Time struct {
            // wall and ext encode the wall time seconds, wall time nanoseconds,
            // and optional monotonic clock reading in nanoseconds.
            wall uint64
            ext  int64
            //Location to represent timeZone
            // The nil location means UTC
            loc *Location
        }

> Create a new time
- Using time.Now(), can be used to get current local timestamp. Signature:
func Now() Time

- Using time.Date()
This function return the time which is yyyy-mm-dd hh:mm:ss + nsec nanoseconds with the appropriate time zone corresponding to the given location. The signature functin is :
func Date(yeat int, month Month, day, hour, min, sec, nsec int, loc *Location) Time

> Understanding Duration
Duration is the time that has elapsed between two instants of time. It is represented as int64nanosecond count.
So duration is nothing in Go but just a number representing time in nanoseconds.
So if duration value is equal to 1000000000 then it represents 1 sec or 1000 milliseconds or 1000000000 nanoseconds
As an example duration between two time values 1 hour apart will be below value which is equal number of nanoseconds in 1 hour.
=== 1 *60*60*1000*1000*1000
it is represented as below in the time package.
=== type Duration int64
Below are some common duration which are defined in time package:
const (
    Nanosecond  Duration = 1
    Microsecond          = 1000 * Nanosecond
    Millisecond          = 1000 * Microsecond
    Second               = 1000 * Millisecond
    Minute               = 60 * Second
    Hour                 = 60 * Minute
)

Some of the function defined on time.Time object that returns the Duration are:
- func (t Time) Sub(u Time) Duration – It returns the duration t-u
- func Since(t Time) Duration – It returns the duration which has elapsed since t
- func Until(t Time) Duration – It returns the duration until t


Below placeholder table describes the exact mapping. Go takes a more pragmatic approach where you don’t need to remember or lookup for the traditional formatting codes as in other languages
Type	Placeholder
Day	2 or 02 or _2
Day of Week	Monday or Mon
Month	01 or 1 or Jan or January
Year	2006 or 06
Hour	03 or 3 or 15
Minutes	04 or 4
Seconds	05 or 5
Milli Seconds  (ms)	.000        //Trailing zero will be includedor .999   //Trailing zero will be omitted
Micro Seconds (μs)	.000000             //Trailing zero will be includedor .999999        //Trailing zero will be omitted
Nano Seconds (ns)	.000000000        //Trailing zero will be includedor .999999999 //Trailing zero will be omitted
am/pm	PM or pm
Timezone	MST
Timezone offset	Z0700 or Z070000 or Z07 or Z07:00 or Z07:00:00  or -0700 or  -070000 or -07 or -07:00 or -07:00:00